{"ast":null,"code":"/* SELECTORS */\nexport const getAllTrips = ({\n  trips\n}) => trips;\nexport const getFilteredTrips = ({\n  trips,\n  filters\n}) => {\n  let output = trips; // filter by search phrase\n\n  if (filters.searchPhrase) {\n    const pattern = new RegExp(filters.searchPhrase, 'i');\n    output = output.filter(trip => pattern.test(trip.name));\n  } // TODO - filter by duration\n\n\n  if (filters.duration) {\n    output = output.filter(trip => trip.days >= filters.duration.from && trip.days <= filters.duration.to);\n  } // TODO - filter by tags\n\n\n  if (filters.tags.length > 0) {\n    output = output.filter(trip => filters.tags.every(filterTag => trip.tags.includes(filterTag)));\n  } // TODO - sort by cost descending (most expensive goes first)\n\n\n  return output;\n};\nexport const getTripById = ({\n  trips\n}, tripId) => {\n  // TODO - filter trips by tripId\n  const filtered = trips.filter(trip => trip.id === tripId);\n};\nexport const getTripsForCountry = ({\n  trips\n}, countryCode) => {\n  const filtered = trips; // TODO - filter trips by countryCode\n\n  console.log('filtering trips by countryCode:', countryCode, filtered);\n  return filtered.length ? filtered : [{\n    error: true\n  }];\n};\n/* ACTIONS */\n\n/*\n// action name creator\nconst reducerName = 'trips';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n// action types\n\n\n// action creators\n\n\n// reducer\nexport default function reducer(statePart = [], action = {}) {\n  switch (action.type) {\n    default:\n      return statePart;\n  }\n}\n */","map":{"version":3,"sources":["/Users/dariagorecka/Documents/KODILLA/travel-agency/src/redux/tripsRedux.js"],"names":["getAllTrips","trips","getFilteredTrips","filters","output","searchPhrase","pattern","RegExp","filter","trip","test","name","duration","days","from","to","tags","length","every","filterTag","includes","getTripById","tripId","filtered","id","getTripsForCountry","countryCode","console","log","error"],"mappings":"AAAA;AAEA,OAAO,MAAMA,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAaA,KAAjC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAACD,EAAAA,KAAD;AAAQE,EAAAA;AAAR,CAAD,KAAsB;AACpD,MAAIC,MAAM,GAAGH,KAAb,CADoD,CAGpD;;AACA,MAAGE,OAAO,CAACE,YAAX,EAAwB;AACtB,UAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAWJ,OAAO,CAACE,YAAnB,EAAiC,GAAjC,CAAhB;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAcC,IAAI,IAAIH,OAAO,CAACI,IAAR,CAAaD,IAAI,CAACE,IAAlB,CAAtB,CAAT;AACD,GAPmD,CASpD;;;AACA,MAAIR,OAAO,CAACS,QAAZ,EAAsB;AACpBR,IAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CACNC,IAAD,IACEA,IAAI,CAACI,IAAL,IAAaV,OAAO,CAACS,QAAR,CAAiBE,IAA9B,IAAsCL,IAAI,CAACI,IAAL,IAAaV,OAAO,CAACS,QAAR,CAAiBG,EAF/D,CAAT;AAID,GAfmD,CAiBpD;;;AACA,MAAGZ,OAAO,CAACa,IAAR,CAAaC,MAAb,GAAsB,CAAzB,EAA4B;AAC1Bb,IAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAcC,IAAI,IAAIN,OAAO,CAACa,IAAR,CAAaE,KAAb,CAAmBC,SAAS,IAAIV,IAAI,CAACO,IAAL,CAAUI,QAAV,CAAmBD,SAAnB,CAAhC,CAAtB,CAAT;AACD,GApBmD,CAsBpD;;;AAEA,SAAOf,MAAP;AACD,CAzBM;AA2BP,OAAO,MAAMiB,WAAW,GAAG,CAAC;AAACpB,EAAAA;AAAD,CAAD,EAAUqB,MAAV,KAAqB;AAG9C;AACA,QAAMC,QAAQ,GAAGtB,KAAK,CAACO,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACe,EAAL,KAAYF,MAAjC,CAAjB;AAED,CANM;AAQP,OAAO,MAAMG,kBAAkB,GAAG,CAAC;AAACxB,EAAAA;AAAD,CAAD,EAAUyB,WAAV,KAA0B;AAC1D,QAAMH,QAAQ,GAAGtB,KAAjB,CAD0D,CAG1D;;AAEA0B,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,WAA/C,EAA4DH,QAA5D;AACA,SAAOA,QAAQ,CAACN,MAAT,GAAkBM,QAAlB,GAA6B,CAAC;AAACM,IAAAA,KAAK,EAAE;AAAR,GAAD,CAApC;AACD,CAPM;AASP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* SELECTORS */\n\nexport const getAllTrips = ({trips}) => trips;\n\nexport const getFilteredTrips = ({trips, filters}) => {\n  let output = trips;\n\n  // filter by search phrase\n  if(filters.searchPhrase){\n    const pattern = new RegExp(filters.searchPhrase, 'i');\n    output = output.filter(trip => pattern.test(trip.name));\n  }\n\n  // TODO - filter by duration\n  if (filters.duration) {\n    output = output.filter(\n      (trip) =>\n        trip.days >= filters.duration.from && trip.days <= filters.duration.to\n    );\n  }\n\n  // TODO - filter by tags\n  if(filters.tags.length > 0) {\n    output = output.filter(trip => filters.tags.every(filterTag => trip.tags.includes(filterTag)));\n  }\n\n  // TODO - sort by cost descending (most expensive goes first)\n\n  return output;\n};\n\nexport const getTripById = ({trips}, tripId) => {\n \n\n  // TODO - filter trips by tripId\n  const filtered = trips.filter(trip => trip.id === tripId);\n\n};\n\nexport const getTripsForCountry = ({trips}, countryCode) => {\n  const filtered = trips;\n\n  // TODO - filter trips by countryCode\n\n  console.log('filtering trips by countryCode:', countryCode, filtered);\n  return filtered.length ? filtered : [{error: true}];\n};\n\n/* ACTIONS */\n\n/*\n// action name creator\nconst reducerName = 'trips';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n// action types\n\n\n// action creators\n\n\n// reducer\nexport default function reducer(statePart = [], action = {}) {\n  switch (action.type) {\n    default:\n      return statePart;\n  }\n}\n */\n"]},"metadata":{},"sourceType":"module"}