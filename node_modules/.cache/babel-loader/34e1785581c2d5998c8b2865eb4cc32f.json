{"ast":null,"code":"import countries from '../data/countries.json';\n\nconst parseTrips = (trips, setStates) => {\n  const newState = {\n    countries: {},\n    regions: {},\n    subregions: {},\n    tags: {}\n  };\n\n  for (let trip of trips) {\n    /* add country to newState.countries */\n    if (typeof newState.countries[trip.country.code] === 'undefined') {\n      const countryDetails = countries.filter(item => item.alpha3Code === trip.country.code)[0] || {};\n      newState.countries[trip.country.code] = JSON.parse(JSON.stringify(countryDetails));\n      newState.countries[trip.country.code].trips = [trip.id];\n    } else {\n      newState.countries[trip.country.code].trips.push(trip.id);\n    }\n    /* add all tags to newState.tags */\n\n\n    for (let tag of trip.tags) {\n      if (typeof newState.tags[tag] === 'undefined') {\n        newState.tags[tag] = {\n          trips: [trip.id]\n        };\n      } else {\n        newState.tags[tag].trips.push(trip.id);\n      }\n    }\n  }\n\n  for (let countryCode in newState.countries) {\n    const country = newState.countries[countryCode];\n    /* add region to newState.regions */\n\n    if (typeof newState.regions[country.region] === 'undefined') {\n      newState.regions[country.region] = {\n        countries: [country.alpha3Code],\n        subregions: [country.subregion]\n      };\n    } else if (newState.regions[country.region].subregions.indexOf(country.subregion) === -1) {\n      newState.regions[country.region].subregions.push(country.subregion);\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    } else if (newState.regions[country.region].countries.indexOf(country.alpha3Code) === -1) {\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    }\n    /* add subregion to newState.subregions */\n\n\n    if (typeof newState.subregions[country.subregion] === 'undefined') {\n      newState.subregions[country.subregion] = {\n        region: country.region,\n        countries: [country.alpha3Code]\n      };\n    } else if (newState.subregions[country.subregion].countries.indexOf(country.alpha3Code) === -1) {\n      newState.subregions[country.subregion].countries.push(country.alpha3Code);\n    }\n  }\n\n  setStates(newState);\n};\n\nexport default parseTrips;","map":{"version":3,"sources":["/Users/dariagorecka/Documents/KODILLA/travel-agency/src/utils/parseTrips.js"],"names":["countries","parseTrips","trips","setStates","newState","regions","subregions","tags","trip","country","code","countryDetails","filter","item","alpha3Code","JSON","parse","stringify","id","push","tag","countryCode","region","subregion","indexOf"],"mappings":"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","sourcesContent":["import countries from '../data/countries.json';\n\nconst parseTrips = (trips, setStates) => {\n  const newState = {\n    countries: {},\n    regions: {},\n    subregions: {},\n    tags: {},\n  };\n\n  for(let trip of trips){\n\n    /* add country to newState.countries */\n    if(typeof(newState.countries[trip.country.code]) === 'undefined'){\n      const countryDetails = countries.filter(item => item.alpha3Code === trip.country.code)[0] || {};\n      newState.countries[trip.country.code] = JSON.parse(JSON.stringify(countryDetails));\n      newState.countries[trip.country.code].trips = [trip.id];\n    } else {\n      newState.countries[trip.country.code].trips.push(trip.id);\n    }\n\n    /* add all tags to newState.tags */\n    for(let tag of trip.tags){\n      if(typeof(newState.tags[tag]) === 'undefined'){\n        newState.tags[tag] = {trips: [trip.id]};\n      } else {\n        newState.tags[tag].trips.push(trip.id);\n      }\n    }\n  }\n\n  for(let countryCode in newState.countries){\n    const country = newState.countries[countryCode];\n\n    /* add region to newState.regions */\n    if(typeof(newState.regions[country.region]) === 'undefined'){\n      newState.regions[country.region] = {\n        countries: [country.alpha3Code],\n        subregions: [country.subregion],\n      };\n    } else if(newState.regions[country.region].subregions.indexOf(country.subregion) === -1) {\n      newState.regions[country.region].subregions.push(country.subregion);\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    } else if(newState.regions[country.region].countries.indexOf(country.alpha3Code) === -1) {\n      newState.regions[country.region].countries.push(country.alpha3Code);\n    }\n\n    /* add subregion to newState.subregions */\n    if(typeof(newState.subregions[country.subregion]) === 'undefined'){\n      newState.subregions[country.subregion] = {\n        region: country.region,\n        countries: [country.alpha3Code],\n      };\n    } else if(newState.subregions[country.subregion].countries.indexOf(country.alpha3Code) === -1) {\n      newState.subregions[country.subregion].countries.push(country.alpha3Code);\n    }\n  }\n\n  setStates(newState);\n};\n\nexport default parseTrips;\n"]},"metadata":{},"sourceType":"module"}